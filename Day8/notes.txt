THEORY

Constructors in Java
What is a Constructor? 
  A special method used to initialize objects. It has the same name as the class and no return type.

 Types of Constructors
- Default Constructor: Provided by the compiler if no constructor is defined.
- No-Argument Constructor: Defined by the programmer without parameters.
- Parameterized Constructor: Accepts parameters to initialize fields.
- Copy Constructor (not built-in in Java but can be implemented manually).

Constructor Overloading
Multiple constructors with different parameter lists in the same class.

```java
public class Example {
    Example() { } // no-arg
    Example(String name) { } // parameterized
}
```

Method Overloading
Defining multiple methods with the same name but different parameters.

```java
void show() { }
void show(String name) { }
```

---
INTERVIEW / PRACTICE QUESTIONS

 Q1. What is the purpose of a constructor?
To initialize objects when they are created.

 Can constructors be overloaded?
Yes, by using different numbers/types of parameters.

Can a constructor be private?
Yes, often used in Singleton patterns.

 What is the difference between method overloading and overriding?
Overloading is within the same class (compile-time), overriding is in subclass (runtime).

Can we call a constructor from another constructor?
Yes, using `this()` keyword.

---
 CODE: `BankAccount` Class with Overloaded Constructors

```java
public class BankAccount {
    private String accountHolder;
    private String accountNumber;
    private double balance;

    // 1. Default Constructor
    public BankAccount() {
        this.accountHolder = "Unknown";
        this.accountNumber = "000000";
        this.balance = 0.0;
    }

    // 2. Parameterized Constructor
    public BankAccount(String accountHolder, String accountNumber) {
        this.accountHolder = accountHolder;
        this.accountNumber = accountNumber;
        this.balance = 0.0;
    }

    // 3. Overloaded Constructor with all fields
    public BankAccount(String accountHolder, String accountNumber, double balance) {
        this.accountHolder = accountHolder;
        this.accountNumber = accountNumber;
        this.balance = balance;
    }

    // Method to display account details
    public void displayDetails() {
        System.out.println("Account Holder: " + accountHolder);
        System.out.println("Account Number: " + accountNumber);
        System.out.println("Balance: " + balance);
    }

    // Method Overloading - deposit
    public void deposit(double amount) {
        balance += amount;
    }

    public void deposit(double amount, String source) {
        balance += amount;
        System.out.println("Deposited from: " + source);
    }

    public static void main(String[] args) {
        BankAccount acc1 = new BankAccount(); // default
        BankAccount acc2 = new BankAccount("Subodh", "12345678"); // param 1
        BankAccount acc3 = new BankAccount("Subodh", "12345678", 5000.0); // param 2

        acc1.displayDetails();
        acc2.displayDetails();
        acc3.displayDetails();

        acc3.deposit(2000);
        acc3.deposit(1000, "Salary");
        acc3.displayDetails();
    }
}
```

---

